package club.evolutioniot.ssh.system.web.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletContext;

import org.apache.commons.io.FileUtils;
import org.apache.struts2.ServletActionContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.ActionContext;

import club.evolutioniot.ssh.common.web.action.BaseAction;
import club.evolutioniot.ssh.system.domain.Vedio;
import club.evolutioniot.ssh.system.service.VedioService;

@Controller("vedioAction")
@Scope(value = "prototype")
public class VedioAction extends BaseAction<Vedio> {
	@Autowired
	VedioService vedioService;
	VedioAction vedioAction;

	public void setVedioAction(VedioAction vedioAction) {
		this.vedioAction = vedioAction;
	}

	// 定义输入流
	private InputStream inputStream;
	// 视频本体
	private List<File> file;

	public List<File> getFile() {
		return file;
	}

	public void setFile(List<File> file) {
		this.file = file;
	}

	public InputStream getInputStream() {
		return inputStream;
	}

	public void setInputStream(InputStream inputStream) {
		this.inputStream = inputStream;
	}

	// 列表方法
	public String list() throws Exception {

		List<Vedio> vedioList = this.vedioService.selectAllVedio();
		ActionContext.getContext().put("vedioList", vedioList);
		return "list";

	}

	public String addUI() throws Exception {
		return "addUI";
	}

	public String delete() throws Exception {
		// vedioService.delete(vedio.getVedioId());
		return "tolist";
	}

	public String add() throws Exception {
		Vedio vedio = this.t;
		// 封装带对象中 保存数据库 有时候 我们也可以使用model 但是要设置为封装的属性
		// 得到文件的真实的路径
		// 文件上传成功了
		/*
		 * ServletContext application = ServletActionContext.getServletContext(); String
		 * directory = application.getRealPath("uploadfile"); String saveFilePath =
		 * directory; System.out.println(saveFilePath); //File file = new
		 * File(saveFilePath);
		 */
		// 如果指定的路径没有就创建
		File saveFilePath = new File(ServletActionContext.getServletContext().getRealPath("uploadFile"));
		if (!saveFilePath.exists()) {
			saveFilePath.mkdirs();
		}
		System.out.println(saveFilePath);
		System.out.println(vedio);
		
				
		File target = new File(saveFilePath, vedio.getVedioName()+".mp4");
		FileUtils.copyFile(vedio.getVedioContent(), target);
		
		vedio.setVedioUrl(saveFilePath.toString()+".mp4");
		vedio.setVedioTime(new Date());
		vedio.setVedioState(1);
		// 这样我们就保存了 数据的路径 我们查找的时候，根据这个路径 找到对应视频资源到的id
		vedioService.addVedio(vedio);
		return "add";
	}

	public String VedioOnline() throws Exception {
		Vedio vedio = this.t;
		// 获取到了我们需要操作的video 的对象
		vedio = vedioService.findVedioById(vedio.getVedioId());
		String vedioFileName = java.net.URLEncoder.encode(vedio.getVedioName(), "UTF-8");
		String vediosavePath = java.net.URLEncoder.encode(vedio.getVedioUrl() + vedio.getVedioName(), "UTF-8");
		System.out.println("id" + vedio.getVedioId());
		ActionContext.getContext().put("vedioId", vedio.getVedioId());
		ActionContext.getContext().put("vedioName", vedioFileName);
		ActionContext.getContext().put("vediosavePath", vediosavePath);
		ActionContext.getContext().put("vedioUrl", vedio.getVedioUrl() + vedio.getVedioName());
		return "vedioOnLine";
	}
	
	public String VedioFind() throws Exception{
		Vedio vedio=this.t;
	    List<Vedio> vedioList= this.vedioService.selectVedioByName(vedio.getVedioName());
		ActionContext.getContext().put("vedioList", vedioList);
		return "vedioFind";
		
	}

}
